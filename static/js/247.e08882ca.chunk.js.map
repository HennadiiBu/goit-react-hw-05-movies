{"version":3,"file":"static/js/247.e08882ca.chunk.js","mappings":"8KAEMA,EAAW,gCACXC,EAAM,mCAQNC,EAAqB,mCAAG,8GAEHC,EAAAA,EAAAA,GAAM,GAAD,OACvBH,EADuB,oBATd,QASc,YARb,MAQa,oBACgCC,IAHlC,cAEpBG,EAFoB,yBAKnBA,EAASC,MALU,yDAOnBC,QAAQC,IAAR,OAPmB,yDAAH,qDAWrBC,EAAqB,mCAAG,WAAMC,GAAN,iGAEHN,EAAAA,EAAAA,GAAM,GAAD,OACvBH,EADuB,8BACOS,EADP,oBACwBR,IAH1B,cAEpBG,EAFoB,yBAKnBA,EAASC,MALU,yDAOnBC,QAAQC,IAAR,OAPmB,yDAAH,sDAWrBG,EAAiB,mCAAG,WAAMC,GAAN,iGAECR,EAAAA,EAAAA,GAAM,GAAD,OACvBH,EADuB,iBACNW,EADM,oBACQV,IAHd,cAEhBG,EAFgB,yBAKfA,EAASC,MALM,yDAOfC,QAAQC,IAAR,OAPe,yDAAH,sDAWjBK,EAAiB,mCAAG,WAAMD,GAAN,iGAECR,EAAAA,EAAAA,GAAM,GAAD,OACvBH,EADuB,iBACNW,EADM,4BACgBV,IAHtB,cAEhBG,EAFgB,yBAKfA,EAASC,MALM,yDAOfC,QAAQC,IAAR,OAPe,yDAAH,sDAWjBM,EAAiB,mCAAG,WAAMF,GAAN,iGAECR,EAAAA,EAAAA,GAAM,GAAD,OACvBH,EADuB,iBACNW,EADM,4BACgBV,IAHtB,cAEhBG,EAFgB,yBAKfA,EAASC,MALM,yDAOfC,QAAQC,IAAR,OAPe,yDAAH,sDAWjBO,EAAgB,CACpBZ,sBAAAA,EACAM,sBAAAA,EACAE,kBAAAA,EACAE,kBAAAA,EACAC,kBAAAA,EACAE,eAjEqB,WACrB,MAAO,iCACR,GAkED,K,8EC3BA,UA5CA,WACE,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAYA,OAVAC,EAAAA,EAAAA,YAAU,WACRT,EAAAA,EAAAA,kBACqBK,GAClBK,KAAKF,GACLG,OAAM,SAAAC,GAEL,OADAR,EAASQ,GACFpB,QAAQC,IAAIU,EACpB,GACJ,GAAE,CAACA,EAAOE,KAGT,8BACGE,GACC,iCACE,mCACA,wBACGA,EAAMM,KAAKC,KAAI,SAAAC,GAAK,OACnB,yBACE,4BACE,gBACEC,IAAKD,EAAME,aAAN,UAAsBjB,EAAAA,EAAAA,kBAAtB,OACHe,EAAME,cADH,+FAGLC,IAAG,gBAAWH,EAAMI,eACpBC,MAAO,CACLC,MAAM,YAGV,wBAAKN,EAAMI,oBAXNJ,EAAMlB,GADI,UAkBzB,kDAGP,C","sources":["Api/Api.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst key = 'bb7e126d2686992af4848a036ba19fca';\nconst mediaType = 'movie';\nconst timeWindow = 'day';\n\nconst BASE_URL_IMAGE = () => {\n  return 'https://image.tmdb.org/t/p/w500';\n};\n\nconst fetchTrendingDayMovie = async () => {\n  try {\n    const responce = await axios(\n      `${BASE_URL}trending/${mediaType}/${timeWindow}?api_key=${key}`\n    );\n    return responce.data;\n  } catch (message) {\n    return console.log(message);\n  }\n};\n\nconst fetchSearchQueryMovie = async query => {\n  try {\n    const responce = await axios(\n      `${BASE_URL}search/movie?query=${query}&api_key=${key}`\n    );\n    return responce.data;\n  } catch (message) {\n    return console.log(message);\n  }\n};\n\nconst fetchDetailsMovie = async id => {\n  try {\n    const responce = await axios(\n      `${BASE_URL}movie/${id}?api_key=${key}`\n    );\n    return responce.data;\n  } catch (message) {\n    return console.log(message);\n  }\n};\n\nconst fetchCreditsMovie = async id => {\n  try {\n    const responce = await axios(\n      `${BASE_URL}movie/${id}/credits?api_key=${key}`\n    );\n    return responce.data;\n  } catch (message) {\n    return console.log(message);\n  }\n};\n\nconst fetchReviewsMovie = async id => {\n  try {\n    const responce = await axios(\n      `${BASE_URL}movie/${id}/reviews?api_key=${key}`\n    );\n    return responce.data;\n  } catch (message) {\n    return console.log(message);\n  }\n};\n\nconst apiTheMovieDB = {\n  fetchTrendingDayMovie,\n  fetchSearchQueryMovie,\n  fetchDetailsMovie,\n  fetchCreditsMovie,\n  fetchReviewsMovie,\n  BASE_URL_IMAGE,\n};\n\nexport default apiTheMovieDB;\n","import apiTheMovieDB from 'Api/Api';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nfunction Cast() {\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n\n  useEffect(() => {\n    apiTheMovieDB\n      .fetchCreditsMovie(movieId)\n      .then(setMovie)\n      .catch(err => {\n        setError(err);\n        return console.log(error);\n      });\n  }, [error, movieId]);\n\n  return (\n    <>\n      {movie ? (\n        <>\n          <h3>Cast:</h3>\n          <ul>\n            {movie.cast.map(actor => (\n              <li key={actor.id}>\n                <div>\n                  <img\n                    src={actor.profile_path?`${apiTheMovieDB.BASE_URL_IMAGE()}${\n                      actor.profile_path\n                    }`:`https://www.publicdomainpictures.net/pictures/280000/velka/not-found-image-15383864787lu.jpg`}\n                    alt={`actor ${actor.original_name}`}\n                    style={{\n                      width:'200px'\n                    }}\n                  />\n                  <h3>{actor.original_name}</h3>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </>\n      ):<p>Actors list not found</p>}\n    </>\n  );\n}\n\nexport default Cast;\n"],"names":["BASE_URL","key","fetchTrendingDayMovie","axios","responce","data","console","log","fetchSearchQueryMovie","query","fetchDetailsMovie","id","fetchCreditsMovie","fetchReviewsMovie","apiTheMovieDB","BASE_URL_IMAGE","useState","error","setError","movieId","useParams","movie","setMovie","useEffect","then","catch","err","cast","map","actor","src","profile_path","alt","original_name","style","width"],"sourceRoot":""}